
Timers_Static_design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000bac  00000c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800066  00800066  00000c46  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000013a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c79  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bd  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cc  00000000  00000000  00002396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c7  00000000  00000000  00003459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_4>
  14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_5>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_6>
  1c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_7>
  20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_8>
  24:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_9>
  28:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_10>
  2c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_11>
  30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_12>
  34:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_13>
  38:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_14>
  3c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_15>
  40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_16>
  44:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_17>
  48:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_18>
  4c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_19>
  50:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 05 	call	0xba6	; 0xba6 <main>
  8a:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63
}
  98:	08 95       	ret

0000009a <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
SET_BIT(GICR,INT2);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
  a0:	84 b7       	in	r24, 0x34	; 52
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	84 bf       	out	0x34, r24	; 52
}
  a6:	08 95       	ret

000000a8 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
  a8:	8f b7       	in	r24, 0x3f	; 63
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8f bf       	out	0x3f, r24	; 63
}
  ae:	08 95       	ret

000000b0 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	4f 93       	push	r20
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
  INT0_external_interrupt();
  d2:	e0 91 7f 00 	lds	r30, 0x007F
  d6:	f0 91 80 00 	lds	r31, 0x0080
  da:	09 95       	icall
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
  INT1_external_interrupt();
 120:	e0 91 87 00 	lds	r30, 0x0087
 124:	f0 91 88 00 	lds	r31, 0x0088
 128:	09 95       	icall
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
  INT2_external_interrupt();
 16e:	e0 91 75 00 	lds	r30, 0x0075
 172:	f0 91 76 00 	lds	r31, 0x0076
 176:	09 95       	icall
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
TIMER2COMP();
 1bc:	e0 91 8d 00 	lds	r30, 0x008D
 1c0:	f0 91 8e 00 	lds	r31, 0x008E
 1c4:	09 95       	icall
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
  TIMER2OVF();
 20a:	e0 91 6b 00 	lds	r30, 0x006B
 20e:	f0 91 6c 00 	lds	r31, 0x006C
 212:	09 95       	icall
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
  TIMER1CAPT();
 258:	e0 91 89 00 	lds	r30, 0x0089
 25c:	f0 91 8a 00 	lds	r31, 0x008A
 260:	09 95       	icall
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
TIMER1COMPA();
 2a6:	e0 91 71 00 	lds	r30, 0x0071
 2aa:	f0 91 72 00 	lds	r31, 0x0072
 2ae:	09 95       	icall
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
  TIMER1COMPB();
 2f4:	e0 91 6f 00 	lds	r30, 0x006F
 2f8:	f0 91 70 00 	lds	r31, 0x0070
 2fc:	09 95       	icall
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
  TIMER1OVF();
 342:	e0 91 8b 00 	lds	r30, 0x008B
 346:	f0 91 8c 00 	lds	r31, 0x008C
 34a:	09 95       	icall
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31

  TIMER0COMP();
 390:	e0 91 83 00 	lds	r30, 0x0083
 394:	f0 91 84 00 	lds	r31, 0x0084
 398:	09 95       	icall
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31

  TIMER0OVF_INT();
 3de:	e0 91 77 00 	lds	r30, 0x0077
 3e2:	f0 91 78 00 	lds	r31, 0x0078
 3e6:	09 95       	icall
}
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
  SPI_STC();
 42c:	e0 91 73 00 	lds	r30, 0x0073
 430:	f0 91 74 00 	lds	r31, 0x0074
 434:	09 95       	icall
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
  USART_RXC();
 47a:	e0 91 69 00 	lds	r30, 0x0069
 47e:	f0 91 6a 00 	lds	r31, 0x006A
 482:	09 95       	icall
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
  USART_UDRE();
 4c8:	e0 91 85 00 	lds	r30, 0x0085
 4cc:	f0 91 86 00 	lds	r31, 0x0086
 4d0:	09 95       	icall
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
  USART_TXC();
 516:	e0 91 81 00 	lds	r30, 0x0081
 51a:	f0 91 82 00 	lds	r31, 0x0082
 51e:	09 95       	icall
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
  ADC_INT();
 564:	e0 91 7b 00 	lds	r30, 0x007B
 568:	f0 91 7c 00 	lds	r31, 0x007C
 56c:	09 95       	icall
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
  EE_RDY();
 5b2:	e0 91 7d 00 	lds	r30, 0x007D
 5b6:	f0 91 7e 00 	lds	r31, 0x007E
 5ba:	09 95       	icall
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
  ANA_COMP();
 600:	e0 91 79 00 	lds	r30, 0x0079
 604:	f0 91 7a 00 	lds	r31, 0x007A
 608:	09 95       	icall
}
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
  TWI_I2C();
 64e:	e0 91 67 00 	lds	r30, 0x0067
 652:	f0 91 68 00 	lds	r31, 0x0068
 656:	09 95       	icall
}
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	7f 91       	pop	r23
 666:	6f 91       	pop	r22
 668:	5f 91       	pop	r21
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	4f 93       	push	r20
 68a:	5f 93       	push	r21
 68c:	6f 93       	push	r22
 68e:	7f 93       	push	r23
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	af 93       	push	r26
 696:	bf 93       	push	r27
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
  SPM_RDY();
 69c:	e0 91 6d 00 	lds	r30, 0x006D
 6a0:	f0 91 6e 00 	lds	r31, 0x006E
 6a4:	09 95       	icall
}
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <Timer_Init>:
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ec 01       	movw	r28, r24
prescaler_value=Timer_cfg->Timer_Prescaler;
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	80 93 66 00 	sts	0x0066, r24
switch (Timer_cfg->Timer_CH_NO) {
 6d4:	88 81       	ld	r24, Y
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	09 f4       	brne	.+2      	; 0x6dc <Timer_Init+0x14>
 6da:	48 c0       	rjmp	.+144    	; 0x76c <Timer_Init+0xa4>
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <Timer_Init+0x20>
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <Timer_Init+0x1e>
 6e4:	d7 c0       	rjmp	.+430    	; 0x894 <__stack+0x35>
 6e6:	90 c0       	rjmp	.+288    	; 0x808 <Timer_Init+0x140>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
    case TIMER_CH0:
        {
  TCCR0 |=T0_NORMAL_MODE;
 6e8:	83 b7       	in	r24, 0x33	; 51
 6ea:	83 bf       	out	0x33, r24	; 51
  
          switch (Timer_cfg->Timer_Mode) {
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	b9 f0       	breq	.+46     	; 0x720 <Timer_Init+0x58>
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <Timer_Init+0x36>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	09 f0       	breq	.+2      	; 0x6fc <Timer_Init+0x34>
 6fa:	cd c0       	rjmp	.+410    	; 0x896 <__stack+0x37>
 6fc:	24 c0       	rjmp	.+72     	; 0x746 <Timer_Init+0x7e>
          case TIMER_MODE:
              {
                switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	88 23       	and	r24, r24
 702:	21 f0       	breq	.+8      	; 0x70c <Timer_Init+0x44>
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	09 f0       	breq	.+2      	; 0x70a <Timer_Init+0x42>
 708:	c8 c0       	rjmp	.+400    	; 0x89a <__stack+0x3b>
 70a:	04 c0       	rjmp	.+8      	; 0x714 <Timer_Init+0x4c>
				{
                    case TIMER_POLLING_MODE:
                        {/*Disable interrupts for T0 without effecting any other timer*/
                         /*without Disabling Global interrupt*/
                        TIMSK &=T0_INTERRUPT_DISABLE;
 70c:	89 b7       	in	r24, 0x39	; 57
 70e:	8c 7f       	andi	r24, 0xFC	; 252
 710:	89 bf       	out	0x39, r24	; 57
                            break;
 712:	2c c0       	rjmp	.+88     	; 0x76c <Timer_Init+0xa4>
                         }
                                  case TIMER_INTERRUPT_MODE:
                                  { /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
                                    */
                                    G_interrupt_Enable();
 714:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                                    TIMSK |= T0_INTERRUPT_NORMAL;
 718:	89 b7       	in	r24, 0x39	; 57
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	89 bf       	out	0x39, r24	; 57
                                    break;
 71e:	26 c0       	rjmp	.+76     	; 0x76c <Timer_Init+0xa4>
/*                             TIMER 0 As a COUNTER_RISING_MODE          */
/*************************************************************************/

                          case COUNTER_RISING_MODE:
                            {
                                  TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
 720:	83 b7       	in	r24, 0x33	; 51
 722:	8d 60       	ori	r24, 0x0D	; 13
 724:	83 bf       	out	0x33, r24	; 51
                                    switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	88 23       	and	r24, r24
 72a:	21 f0       	breq	.+8      	; 0x734 <Timer_Init+0x6c>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	09 f0       	breq	.+2      	; 0x732 <Timer_Init+0x6a>
 730:	b6 c0       	rjmp	.+364    	; 0x89e <__stack+0x3f>
 732:	04 c0       	rjmp	.+8      	; 0x73c <Timer_Init+0x74>
                                        case TIMER_POLLING_MODE:
                                          {
            /*Disable interrupts for T0 without effecting any other timer*/
              /*without Disabling Global interrupt*/
                                            TIMSK &=T0_INTERRUPT_DISABLE;
 734:	89 b7       	in	r24, 0x39	; 57
 736:	8c 7f       	andi	r24, 0xFC	; 252
 738:	89 bf       	out	0x39, r24	; 57
                                            break;
 73a:	05 c0       	rjmp	.+10     	; 0x746 <Timer_Init+0x7e>

                                          case TIMER_INTERRUPT_MODE:
                                           /*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
                                              */
                                              G_interrupt_Enable();
 73c:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                                              TIMSK |= T0_INTERRUPT_NORMAL;
 740:	89 b7       	in	r24, 0x39	; 57
 742:	81 60       	ori	r24, 0x01	; 1
 744:	89 bf       	out	0x39, r24	; 57
/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
/*************************************************************************/

                                    case COUNTER_FALLING_MODE:
                                    {
                                        TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
 746:	83 b7       	in	r24, 0x33	; 51
 748:	8c 60       	ori	r24, 0x0C	; 12
 74a:	83 bf       	out	0x33, r24	; 51
                                          switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	88 23       	and	r24, r24
 750:	21 f0       	breq	.+8      	; 0x75a <Timer_Init+0x92>
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	09 f0       	breq	.+2      	; 0x758 <Timer_Init+0x90>
 756:	a5 c0       	rjmp	.+330    	; 0x8a2 <__stack+0x43>
 758:	04 c0       	rjmp	.+8      	; 0x762 <Timer_Init+0x9a>
                                              case TIMER_POLLING_MODE:
                                                {

            /*Disable interrupts for T0 without effecting any other timer*/
                /*without Disabling Global interrupt*/
                                                  TIMSK &=T0_INTERRUPT_DISABLE;
 75a:	89 b7       	in	r24, 0x39	; 57
 75c:	8c 7f       	andi	r24, 0xFC	; 252
 75e:	89 bf       	out	0x39, r24	; 57

                                                  break;
 760:	05 c0       	rjmp	.+10     	; 0x76c <Timer_Init+0xa4>
                                                case TIMER_INTERRUPT_MODE:
                                                  {
                                                    /*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
                                                    */
                                                    G_interrupt_Enable();
 762:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;
 766:	89 b7       	in	r24, 0x39	; 57
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	89 bf       	out	0x39, r24	; 57
/*************************************************************************/

    case TIMER_CH1:
        {

    switch (Timer_cfg->Timer_Mode)
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	d9 f0       	breq	.+54     	; 0x7a8 <Timer_Init+0xe0>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	20 f0       	brcs	.+8      	; 0x77e <Timer_Init+0xb6>
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	09 f0       	breq	.+2      	; 0x77c <Timer_Init+0xb4>
 77a:	95 c0       	rjmp	.+298    	; 0x8a6 <__stack+0x47>
 77c:	2d c0       	rjmp	.+90     	; 0x7d8 <Timer_Init+0x110>
    {
      case TIMER_MODE:
      {
        TCCR1 = T1_NORMAL_MODE_CONFIG;
 77e:	1f bc       	out	0x2f, r1	; 47
 780:	1e bc       	out	0x2e, r1	; 46
              switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	88 23       	and	r24, r24
 786:	21 f0       	breq	.+8      	; 0x790 <Timer_Init+0xc8>
 788:	81 30       	cpi	r24, 0x01	; 1
 78a:	09 f0       	breq	.+2      	; 0x78e <Timer_Init+0xc6>
 78c:	8e c0       	rjmp	.+284    	; 0x8aa <__stack+0x4b>
 78e:	05 c0       	rjmp	.+10     	; 0x79a <Timer_Init+0xd2>
              case TIMER_POLLING_MODE:
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;
 790:	89 b7       	in	r24, 0x39	; 57
 792:	83 7c       	andi	r24, 0xC3	; 195
 794:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 796:	80 e0       	ldi	r24, 0x00	; 0
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 798:	95 c0       	rjmp	.+298    	; 0x8c4 <__stack+0x65>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 79a:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 79e:	89 b7       	in	r24, 0x39	; 57
 7a0:	84 60       	ori	r24, 0x04	; 4
 7a2:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 7a6:	8e c0       	rjmp	.+284    	; 0x8c4 <__stack+0x65>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
            TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
 7a8:	8e b5       	in	r24, 0x2e	; 46
 7aa:	9f b5       	in	r25, 0x2f	; 47
 7ac:	87 60       	ori	r24, 0x07	; 7
 7ae:	9f bd       	out	0x2f, r25	; 47
 7b0:	8e bd       	out	0x2e, r24	; 46

            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 7b2:	8a 81       	ldd	r24, Y+2	; 0x02
 7b4:	88 23       	and	r24, r24
 7b6:	21 f0       	breq	.+8      	; 0x7c0 <Timer_Init+0xf8>
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	09 f0       	breq	.+2      	; 0x7be <Timer_Init+0xf6>
 7bc:	78 c0       	rjmp	.+240    	; 0x8ae <__stack+0x4f>
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <Timer_Init+0x102>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 7c0:	89 b7       	in	r24, 0x39	; 57
 7c2:	83 7c       	andi	r24, 0xC3	; 195
 7c4:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 7c8:	7d c0       	rjmp	.+250    	; 0x8c4 <__stack+0x65>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 7ca:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 7ce:	89 b7       	in	r24, 0x39	; 57
 7d0:	84 60       	ori	r24, 0x04	; 4
 7d2:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 7d4:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 7d6:	76 c0       	rjmp	.+236    	; 0x8c4 <__stack+0x65>
            }
        break;
      }
      case COUNTER_FALLING_MODE:
      {
            TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
 7d8:	8e b5       	in	r24, 0x2e	; 46
 7da:	9f b5       	in	r25, 0x2f	; 47
 7dc:	86 60       	ori	r24, 0x06	; 6
 7de:	9f bd       	out	0x2f, r25	; 47
 7e0:	8e bd       	out	0x2e, r24	; 46
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	88 23       	and	r24, r24
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <Timer_Init+0x128>
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	09 f0       	breq	.+2      	; 0x7ee <Timer_Init+0x126>
 7ec:	62 c0       	rjmp	.+196    	; 0x8b2 <__stack+0x53>
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <Timer_Init+0x132>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 7f0:	89 b7       	in	r24, 0x39	; 57
 7f2:	83 7c       	andi	r24, 0xC3	; 195
 7f4:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 7f6:	80 e0       	ldi	r24, 0x00	; 0
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
                break;
 7f8:	65 c0       	rjmp	.+202    	; 0x8c4 <__stack+0x65>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 7fa:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 7fe:	89 b7       	in	r24, 0x39	; 57
 800:	84 60       	ori	r24, 0x04	; 4
 802:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 804:	80 e0       	ldi	r24, 0x00	; 0
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */

                break;
 806:	5e c0       	rjmp	.+188    	; 0x8c4 <__stack+0x65>
  /*                             TIMER 2                                   */
  /*************************************************************************/

  case TIMER_CH2:
  {
TCCR2 |=T2_NORMAL_MODE_CONFIG;
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	85 bd       	out	0x25, r24	; 37
    switch (Timer_cfg->Timer_Mode) {
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	88 23       	and	r24, r24
 810:	21 f0       	breq	.+8      	; 0x81a <Timer_Init+0x152>
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	09 f0       	breq	.+2      	; 0x818 <Timer_Init+0x150>
 816:	4f c0       	rjmp	.+158    	; 0x8b6 <__stack+0x57>
 818:	11 c0       	rjmp	.+34     	; 0x83c <Timer_Init+0x174>
      case TIMER_MODE:
      {
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 81a:	8a 81       	ldd	r24, Y+2	; 0x02
 81c:	88 23       	and	r24, r24
 81e:	21 f0       	breq	.+8      	; 0x828 <Timer_Init+0x160>
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	09 f0       	breq	.+2      	; 0x826 <Timer_Init+0x15e>
 824:	4a c0       	rjmp	.+148    	; 0x8ba <__stack+0x5b>
 826:	04 c0       	rjmp	.+8      	; 0x830 <Timer_Init+0x168>
              case TIMER_POLLING_MODE:
              {
                  TIMSK &= T2_INTERRUPT_DISABLE;
 828:	89 b7       	in	r24, 0x39	; 57
 82a:	8f 73       	andi	r24, 0x3F	; 63
 82c:	89 bf       	out	0x39, r24	; 57
                break;
 82e:	32 c0       	rjmp	.+100    	; 0x894 <__stack+0x35>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 830:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 834:	89 b7       	in	r24, 0x39	; 57
 836:	80 6c       	ori	r24, 0xC0	; 192
 838:	89 bf       	out	0x39, r24	; 57

                break;
 83a:	2c c0       	rjmp	.+88     	; 0x894 <__stack+0x35>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
          ASSR |=0x08;
 83c:	82 b5       	in	r24, 0x22	; 34
 83e:	88 60       	ori	r24, 0x08	; 8
 840:	82 bd       	out	0x22, r24	; 34
            switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	51 f0       	breq	.+20     	; 0x85c <Timer_Init+0x194>
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	18 f0       	brcs	.+6      	; 0x852 <Timer_Init+0x18a>
 84c:	82 30       	cpi	r24, 0x02	; 2
 84e:	b9 f5       	brne	.+110    	; 0x8be <__stack+0x5f>
 850:	0c c0       	rjmp	.+24     	; 0x86a <__stack+0xb>
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;
 852:	89 b7       	in	r24, 0x39	; 57
 854:	8f 73       	andi	r24, 0x3F	; 63
 856:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 858:	81 e0       	ldi	r24, 0x01	; 1
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;

                break;
 85a:	34 c0       	rjmp	.+104    	; 0x8c4 <__stack+0x65>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 85c:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 860:	89 b7       	in	r24, 0x39	; 57
 862:	80 6c       	ori	r24, 0xC0	; 192
 864:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 866:	81 e0       	ldi	r24, 0x01	; 1
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
                  TIMSK|=T2_INTERRUPT_NORMAL;
                break;
 868:	2d c0       	rjmp	.+90     	; 0x8c4 <__stack+0x65>
              }
              case COUNTER_FALLING_MODE:
              {
                  ASSR |=0x08;
 86a:	82 b5       	in	r24, 0x22	; 34
 86c:	88 60       	ori	r24, 0x08	; 8
 86e:	82 bd       	out	0x22, r24	; 34
                    switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	88 23       	and	r24, r24
 874:	19 f0       	breq	.+6      	; 0x87c <__stack+0x1d>
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	21 f5       	brne	.+72     	; 0x8c2 <__stack+0x63>
 87a:	05 c0       	rjmp	.+10     	; 0x886 <__stack+0x27>
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;
 87c:	89 b7       	in	r24, 0x39	; 57
 87e:	8f 73       	andi	r24, 0x3F	; 63
 880:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 882:	81 e0       	ldi	r24, 0x01	; 1
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;

                        break;
 884:	1f c0       	rjmp	.+62     	; 0x8c4 <__stack+0x65>
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
 886:	0e 94 49 00 	call	0x92	; 0x92 <G_interrupt_Enable>
                          TIMSK|=T2_INTERRUPT_NORMAL;
 88a:	89 b7       	in	r24, 0x39	; 57
 88c:	80 6c       	ori	r24, 0xC0	; 192
 88e:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 890:	81 e0       	ldi	r24, 0x01	; 1
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
 892:	18 c0       	rjmp	.+48     	; 0x8c4 <__stack+0x65>
 894:	17 c0       	rjmp	.+46     	; 0x8c4 <__stack+0x65>
                                                  return E_NOK;
                                                }
                                      break;
                                      }
                                      default:
                                      return E_NOK;
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	15 c0       	rjmp	.+42     	; 0x8c4 <__stack+0x65>
                                    G_interrupt_Enable();
                                    TIMSK |= T0_INTERRUPT_NORMAL;
                                    break;
                                  }
                                  default :
                                  return E_NOK;
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	13 c0       	rjmp	.+38     	; 0x8c4 <__stack+0x65>
                                              G_interrupt_Enable();
                                              TIMSK |= T0_INTERRUPT_NORMAL;
                                              break;

                                          default :
                                          return E_NOK;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <__stack+0x65>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;

                                                    break;
                                                  }
                                                  default:
                                                  return E_NOK;
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <__stack+0x65>
              return E_NOK;
            }
      break;
      }
      default :
      return E_NOK;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__stack+0x65>
                Enable Timer0 interrupt
                */
                break;
              }
              default :
              return E_NOK;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	0b c0       	rjmp	.+22     	; 0x8c4 <__stack+0x65>
                Enable Timer0 interrupt
                */
                break;
              }
              default:
              return E_NOK;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
                */

                break;
              }
              default :
              return E_NOK;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <__stack+0x65>
            }
        break;
            }
            }
  default:
  return E_NOK;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <__stack+0x65>
                  TIMSK|=T2_INTERRUPT_NORMAL;

                break;
              }
              default :
              return E_NOK;
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <__stack+0x65>
            }
        break;
            }
            }
  default:
  return E_NOK;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <__stack+0x65>
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
                      }

              default :
              return E_NOK;
 8c2:	81 e0       	ldi	r24, 0x01	; 1

}
 }

}
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret

000008ca <Timer_Start>:
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
uint8_t Ret;
switch (Timer_CH_NO) {
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <Timer_Start+0x6>
 8ce:	4f c0       	rjmp	.+158    	; 0x96e <Timer_Start+0xa4>
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <Timer_Start+0x12>
 8d4:	82 30       	cpi	r24, 0x02	; 2
 8d6:	09 f0       	breq	.+2      	; 0x8da <Timer_Start+0x10>
 8d8:	f3 c0       	rjmp	.+486    	; 0xac0 <Timer_Start+0x1f6>
 8da:	97 c0       	rjmp	.+302    	; 0xa0a <Timer_Start+0x140>
case TIMER_CH0:{/***********************************************************************************************************************/
switch(prescaler_value){
 8dc:	80 91 66 00 	lds	r24, 0x0066
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	21 f1       	breq	.+72     	; 0x92c <Timer_Start+0x62>
 8e4:	85 30       	cpi	r24, 0x05	; 5
 8e6:	30 f4       	brcc	.+12     	; 0x8f4 <Timer_Start+0x2a>
 8e8:	81 30       	cpi	r24, 0x01	; 1
 8ea:	51 f0       	breq	.+20     	; 0x900 <Timer_Start+0x36>
 8ec:	82 30       	cpi	r24, 0x02	; 2
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <Timer_Start+0x28>
 8f0:	e9 c0       	rjmp	.+466    	; 0xac4 <Timer_Start+0x1fa>
 8f2:	11 c0       	rjmp	.+34     	; 0x916 <Timer_Start+0x4c>
 8f4:	86 30       	cpi	r24, 0x06	; 6
 8f6:	29 f1       	breq	.+74     	; 0x942 <Timer_Start+0x78>
 8f8:	87 30       	cpi	r24, 0x07	; 7
 8fa:	09 f0       	breq	.+2      	; 0x8fe <Timer_Start+0x34>
 8fc:	e3 c0       	rjmp	.+454    	; 0xac4 <Timer_Start+0x1fa>
 8fe:	2c c0       	rjmp	.+88     	; 0x958 <Timer_Start+0x8e>
case TIMER_PRESCALER_NO :{
if(Timer_Count < MAX0){
 900:	6f 3f       	cpi	r22, 0xFF	; 255
 902:	71 05       	cpc	r23, r1
 904:	08 f0       	brcs	.+2      	; 0x908 <Timer_Start+0x3e>
 906:	e0 c0       	rjmp	.+448    	; 0xac8 <Timer_Start+0x1fe>
TCCR0 |=TIMER_PRESCALER_NO;
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	81 60       	ori	r24, 0x01	; 1
 90c:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 90e:	60 95       	com	r22
 910:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_8 :{
if(Timer_Count < MAX0){
 916:	6f 3f       	cpi	r22, 0xFF	; 255
 918:	71 05       	cpc	r23, r1
 91a:	08 f0       	brcs	.+2      	; 0x91e <Timer_Start+0x54>
 91c:	d7 c0       	rjmp	.+430    	; 0xacc <Timer_Start+0x202>
TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	82 60       	ori	r24, 0x02	; 2
 922:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 924:	60 95       	com	r22
 926:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_64 :{
if(Timer_Count < MAX0){
 92c:	6f 3f       	cpi	r22, 0xFF	; 255
 92e:	71 05       	cpc	r23, r1
 930:	08 f0       	brcs	.+2      	; 0x934 <Timer_Start+0x6a>
 932:	ce c0       	rjmp	.+412    	; 0xad0 <Timer_Start+0x206>
TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
 934:	83 b7       	in	r24, 0x33	; 51
 936:	83 60       	ori	r24, 0x03	; 3
 938:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 93a:	60 95       	com	r22
 93c:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_256 :{
if(Timer_Count < MAX0){
 942:	6f 3f       	cpi	r22, 0xFF	; 255
 944:	71 05       	cpc	r23, r1
 946:	08 f0       	brcs	.+2      	; 0x94a <Timer_Start+0x80>
 948:	c5 c0       	rjmp	.+394    	; 0xad4 <Timer_Start+0x20a>
TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	84 60       	ori	r24, 0x04	; 4
 94e:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 950:	60 95       	com	r22
 952:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_1024 :{
if(Timer_Count < MAX0){
 958:	6f 3f       	cpi	r22, 0xFF	; 255
 95a:	71 05       	cpc	r23, r1
 95c:	08 f0       	brcs	.+2      	; 0x960 <Timer_Start+0x96>
 95e:	bc c0       	rjmp	.+376    	; 0xad8 <Timer_Start+0x20e>
TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
 960:	83 b7       	in	r24, 0x33	; 51
 962:	85 60       	ori	r24, 0x05	; 5
 964:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 966:	60 95       	com	r22
 968:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	08 95       	ret
break;
}
case TIMER_CH1:{

  switch(prescaler_value){
 96e:	80 91 66 00 	lds	r24, 0x0066
 972:	84 30       	cpi	r24, 0x04	; 4
 974:	31 f1       	breq	.+76     	; 0x9c2 <Timer_Start+0xf8>
 976:	85 30       	cpi	r24, 0x05	; 5
 978:	30 f4       	brcc	.+12     	; 0x986 <Timer_Start+0xbc>
 97a:	81 30       	cpi	r24, 0x01	; 1
 97c:	51 f0       	breq	.+20     	; 0x992 <Timer_Start+0xc8>
 97e:	82 30       	cpi	r24, 0x02	; 2
 980:	09 f0       	breq	.+2      	; 0x984 <Timer_Start+0xba>
 982:	ac c0       	rjmp	.+344    	; 0xadc <Timer_Start+0x212>
 984:	12 c0       	rjmp	.+36     	; 0x9aa <Timer_Start+0xe0>
 986:	86 30       	cpi	r24, 0x06	; 6
 988:	41 f1       	breq	.+80     	; 0x9da <Timer_Start+0x110>
 98a:	87 30       	cpi	r24, 0x07	; 7
 98c:	09 f0       	breq	.+2      	; 0x990 <Timer_Start+0xc6>
 98e:	a6 c0       	rjmp	.+332    	; 0xadc <Timer_Start+0x212>
 990:	30 c0       	rjmp	.+96     	; 0x9f2 <Timer_Start+0x128>
  case TIMER_PRESCALER_NO :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER_PRESCALER_NO;
 992:	8e b5       	in	r24, 0x2e	; 46
 994:	9f b5       	in	r25, 0x2f	; 47
 996:	81 60       	ori	r24, 0x01	; 1
 998:	9f bd       	out	0x2f, r25	; 47
 99a:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	7d bd       	out	0x2d, r23	; 45
 9a4:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 9a6:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret=E_NOK;
  }
  break;
 9a8:	08 95       	ret
  }
  case TIMER_PRESCALER_8 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
 9aa:	8e b5       	in	r24, 0x2e	; 46
 9ac:	9f b5       	in	r25, 0x2f	; 47
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	9f bd       	out	0x2f, r25	; 47
 9b2:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	7d bd       	out	0x2d, r23	; 45
 9bc:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 9be:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 9c0:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
 9c2:	8e b5       	in	r24, 0x2e	; 46
 9c4:	9f b5       	in	r25, 0x2f	; 47
 9c6:	83 60       	ori	r24, 0x03	; 3
 9c8:	9f bd       	out	0x2f, r25	; 47
 9ca:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	7d bd       	out	0x2d, r23	; 45
 9d4:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 9d6:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 9d8:	08 95       	ret
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
 9da:	8e b5       	in	r24, 0x2e	; 46
 9dc:	9f b5       	in	r25, 0x2f	; 47
 9de:	84 60       	ori	r24, 0x04	; 4
 9e0:	9f bd       	out	0x2f, r25	; 47
 9e2:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	7d bd       	out	0x2d, r23	; 45
 9ec:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 9ee:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 9f0:	08 95       	ret
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
 9f2:	8e b5       	in	r24, 0x2e	; 46
 9f4:	9f b5       	in	r25, 0x2f	; 47
 9f6:	85 60       	ori	r24, 0x05	; 5
 9f8:	9f bd       	out	0x2f, r25	; 47
 9fa:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	7d bd       	out	0x2d, r23	; 45
 a04:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 a06:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 a08:	08 95       	ret
	break;
}
case TIMER_CH2:
	{
  
		switch(prescaler_value){
 a0a:	80 91 66 00 	lds	r24, 0x0066
 a0e:	84 30       	cpi	r24, 0x04	; 4
 a10:	79 f1       	breq	.+94     	; 0xa70 <Timer_Start+0x1a6>
 a12:	85 30       	cpi	r24, 0x05	; 5
 a14:	40 f4       	brcc	.+16     	; 0xa26 <Timer_Start+0x15c>
 a16:	82 30       	cpi	r24, 0x02	; 2
 a18:	c9 f0       	breq	.+50     	; 0xa4c <Timer_Start+0x182>
 a1a:	83 30       	cpi	r24, 0x03	; 3
 a1c:	10 f5       	brcc	.+68     	; 0xa62 <Timer_Start+0x198>
 a1e:	81 30       	cpi	r24, 0x01	; 1
 a20:	09 f0       	breq	.+2      	; 0xa24 <Timer_Start+0x15a>
 a22:	5e c0       	rjmp	.+188    	; 0xae0 <Timer_Start+0x216>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <Timer_Start+0x16c>
 a26:	86 30       	cpi	r24, 0x06	; 6
 a28:	b9 f1       	breq	.+110    	; 0xa98 <Timer_Start+0x1ce>
 a2a:	86 30       	cpi	r24, 0x06	; 6
 a2c:	58 f1       	brcs	.+86     	; 0xa84 <Timer_Start+0x1ba>
 a2e:	87 30       	cpi	r24, 0x07	; 7
 a30:	09 f0       	breq	.+2      	; 0xa34 <Timer_Start+0x16a>
 a32:	56 c0       	rjmp	.+172    	; 0xae0 <Timer_Start+0x216>
 a34:	3b c0       	rjmp	.+118    	; 0xaac <Timer_Start+0x1e2>
   
		  case TIMER_PRESCALER_NO :
			{
    
				if(Timer_Count < MAX0){
 a36:	6f 3f       	cpi	r22, 0xFF	; 255
 a38:	71 05       	cpc	r23, r1
 a3a:	08 f0       	brcs	.+2      	; 0xa3e <Timer_Start+0x174>
 a3c:	53 c0       	rjmp	.+166    	; 0xae4 <Timer_Start+0x21a>
     
			      TCCR2 |= TIMER_PRESCALER_NO;
 a3e:	85 b5       	in	r24, 0x25	; 37
 a40:	81 60       	ori	r24, 0x01	; 1
 a42:	85 bd       	out	0x25, r24	; 37
		      
				  TCNT2 = MAX2 - Timer_Count;
 a44:	60 95       	com	r22
 a46:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	08 95       	ret
			break;
			}

case TIMER_PRESCALER_8 :
  {
          if(Timer_Count < MAX0)
 a4c:	6f 3f       	cpi	r22, 0xFF	; 255
 a4e:	71 05       	cpc	r23, r1
 a50:	08 f0       	brcs	.+2      	; 0xa54 <Timer_Start+0x18a>
 a52:	4a c0       	rjmp	.+148    	; 0xae8 <Timer_Start+0x21e>
            {
           TCCR2 |=TIMER_PRESCALER_8;
 a54:	85 b5       	in	r24, 0x25	; 37
 a56:	82 60       	ori	r24, 0x02	; 2
 a58:	85 bd       	out	0x25, r24	; 37
           TCNT2 =MAX2 - Timer_Count;
 a5a:	60 95       	com	r22
 a5c:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	08 95       	ret
  }
  case TIMER_PRESCALER_32:
  {
    if(Timer_Count < MAX1)
         {
         TCCR2 |=TIMER_PRESCALER_32;
 a62:	85 b5       	in	r24, 0x25	; 37
 a64:	83 60       	ori	r24, 0x03	; 3
 a66:	85 bd       	out	0x25, r24	; 37
         TCNT2 =MAX2 - Timer_Count;
 a68:	60 95       	com	r22
 a6a:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 a6c:	80 e0       	ldi	r24, 0x00	; 0
        else
        {
    Ret=E_NOK;
  }

    break;
 a6e:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :
  {
       if(Timer_Count < MAX2)
 a70:	6f 3f       	cpi	r22, 0xFF	; 255
 a72:	71 05       	cpc	r23, r1
 a74:	d8 f5       	brcc	.+118    	; 0xaec <Timer_Start+0x222>
       {
       TCCR2 |=TIMER_PRESCALER_64;
 a76:	85 b5       	in	r24, 0x25	; 37
 a78:	84 60       	ori	r24, 0x04	; 4
 a7a:	85 bd       	out	0x25, r24	; 37
       TCNT2 =MAX2 - Timer_Count;
 a7c:	60 95       	com	r22
 a7e:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	08 95       	ret
  Ret=E_NOK;
  }
  break;
  }
  case TIMER_PRESCALER_128 :{
  if(Timer_Count < MAX2){
 a84:	6f 3f       	cpi	r22, 0xFF	; 255
 a86:	71 05       	cpc	r23, r1
 a88:	98 f5       	brcc	.+102    	; 0xaf0 <Timer_Start+0x226>
  TCCR2 |= TIMER_PRESCALER_128;
 a8a:	85 b5       	in	r24, 0x25	; 37
 a8c:	85 60       	ori	r24, 0x05	; 5
 a8e:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 a90:	60 95       	com	r22
 a92:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	08 95       	ret
  Ret= E_NOK;
    }
  break;
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX2){
 a98:	6f 3f       	cpi	r22, 0xFF	; 255
 a9a:	71 05       	cpc	r23, r1
 a9c:	58 f5       	brcc	.+86     	; 0xaf4 <Timer_Start+0x22a>
  TCCR2 |= TIMER_PRESCALER_256;
 a9e:	85 b5       	in	r24, 0x25	; 37
 aa0:	86 60       	ori	r24, 0x06	; 6
 aa2:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 aa4:	60 95       	com	r22
 aa6:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	08 95       	ret

  }
  break;
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX2){
 aac:	6f 3f       	cpi	r22, 0xFF	; 255
 aae:	71 05       	cpc	r23, r1
 ab0:	18 f5       	brcc	.+70     	; 0xaf8 <Timer_Start+0x22e>
  TCCR2 |=TIMER_PRESCALER_1024;
 ab2:	85 b5       	in	r24, 0x25	; 37
 ab4:	87 60       	ori	r24, 0x07	; 7
 ab6:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 ab8:	60 95       	com	r22
 aba:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	08 95       	ret
break;
}
default:
Ret= E_NOK;
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	08 95       	ret
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	08 95       	ret
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	08 95       	ret
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	08 95       	ret
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	08 95       	ret
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	08 95       	ret
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	08 95       	ret
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	08 95       	ret
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	08 95       	ret
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	08 95       	ret
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	08 95       	ret
 aec:	80 e0       	ldi	r24, 0x00	; 0
 aee:	08 95       	ret
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	08 95       	ret
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	08 95       	ret
 af8:	80 e0       	ldi	r24, 0x00	; 0
Ret= E_NOK;
break;
}
return Ret;

}
 afa:	08 95       	ret

00000afc <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret;
switch (Timer_CH_NO) {
 afc:	81 30       	cpi	r24, 0x01	; 1
 afe:	51 f0       	breq	.+20     	; 0xb14 <Timer_Stop+0x18>
 b00:	81 30       	cpi	r24, 0x01	; 1
 b02:	18 f0       	brcs	.+6      	; 0xb0a <Timer_Stop+0xe>
 b04:	82 30       	cpi	r24, 0x02	; 2
 b06:	91 f4       	brne	.+36     	; 0xb2c <Timer_Stop+0x30>
 b08:	0c c0       	rjmp	.+24     	; 0xb22 <Timer_Stop+0x26>
  case TIMER_CH0:
  {
		TCCR0 &=0xF8;
 b0a:	83 b7       	in	r24, 0x33	; 51
 b0c:	88 7f       	andi	r24, 0xF8	; 248
 b0e:	83 bf       	out	0x33, r24	; 51
		Ret=E_OK;
 b10:	80 e0       	ldi	r24, 0x00	; 0
		break;
 b12:	08 95       	ret
  }
  case TIMER_CH1:
  {
	     TCCR1 &=0xFFF8;
 b14:	8e b5       	in	r24, 0x2e	; 46
 b16:	9f b5       	in	r25, 0x2f	; 47
 b18:	88 7f       	andi	r24, 0xF8	; 248
 b1a:	9f bd       	out	0x2f, r25	; 47
 b1c:	8e bd       	out	0x2e, r24	; 46
		 Ret=E_OK;
 b1e:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 b20:	08 95       	ret
  }
  case TIMER_CH2:
    {
		 TCCR2 &= 0xF8;
 b22:	85 b5       	in	r24, 0x25	; 37
 b24:	88 7f       	andi	r24, 0xF8	; 248
 b26:	85 bd       	out	0x25, r24	; 37
		 Ret=E_OK;
 b28:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 b2a:	08 95       	ret
    }
  default :
  Ret=E_NOK;
 b2c:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;

}
 b2e:	08 95       	ret

00000b30 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{
  switch (Timer_CH_NO) {
 b30:	81 30       	cpi	r24, 0x01	; 1
 b32:	59 f0       	breq	.+22     	; 0xb4a <Timer_GetStatus+0x1a>
 b34:	81 30       	cpi	r24, 0x01	; 1
 b36:	18 f0       	brcs	.+6      	; 0xb3e <Timer_GetStatus+0xe>
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	c9 f4       	brne	.+50     	; 0xb6e <Timer_GetStatus+0x3e>
 b3c:	0e c0       	rjmp	.+28     	; 0xb5a <Timer_GetStatus+0x2a>
    case TIMER_CH0:
    {
  *Data =((TIFR>>TOV0)&1);
 b3e:	88 b7       	in	r24, 0x38	; 56
 b40:	81 70       	andi	r24, 0x01	; 1
 b42:	fb 01       	movw	r30, r22
 b44:	80 83       	st	Z, r24
    return E_OK;
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	08 95       	ret
    }
    case TIMER_CH1:
    {
    *Data =((TIFR>>TOV1)&1);
 b4a:	88 b7       	in	r24, 0x38	; 56
 b4c:	86 95       	lsr	r24
 b4e:	86 95       	lsr	r24
 b50:	81 70       	andi	r24, 0x01	; 1
 b52:	fb 01       	movw	r30, r22
 b54:	80 83       	st	Z, r24
    return E_OK;
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	08 95       	ret
    }
     case TIMER_CH2:
      {
  *Data =((TIFR>>TOV2)&1);
 b5a:	88 b7       	in	r24, 0x38	; 56
 b5c:	82 95       	swap	r24
 b5e:	86 95       	lsr	r24
 b60:	86 95       	lsr	r24
 b62:	83 70       	andi	r24, 0x03	; 3
 b64:	81 70       	andi	r24, 0x01	; 1
 b66:	fb 01       	movw	r30, r22
 b68:	80 83       	st	Z, r24
    return E_OK;
 b6a:	80 e0       	ldi	r24, 0x00	; 0
 b6c:	08 95       	ret
      }
    default :
    return E_NOK;
 b6e:	81 e0       	ldi	r24, 0x01	; 1
  }
}
 b70:	08 95       	ret

00000b72 <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
 b72:	fb 01       	movw	r30, r22
	uint8_t Ret=0;
	switch (Timer_CH_NO) {
 b74:	81 30       	cpi	r24, 0x01	; 1
 b76:	51 f0       	breq	.+20     	; 0xb8c <Timer_GetValue+0x1a>
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <Timer_GetValue+0x10>
 b7c:	82 30       	cpi	r24, 0x02	; 2
 b7e:	89 f4       	brne	.+34     	; 0xba2 <Timer_GetValue+0x30>
 b80:	0b c0       	rjmp	.+22     	; 0xb98 <Timer_GetValue+0x26>
		case TIMER_CH0:
		{
			*Data =TCNT0;
 b82:	82 b7       	in	r24, 0x32	; 50
 b84:	80 83       	st	Z, r24
 b86:	11 82       	std	Z+1, r1	; 0x01
			Ret= E_OK;
 b88:	80 e0       	ldi	r24, 0x00	; 0
			break;
 b8a:	08 95       	ret
		}
		case TIMER_CH1:
		{
			*Data =TCNT1;
 b8c:	8c b5       	in	r24, 0x2c	; 44
 b8e:	9d b5       	in	r25, 0x2d	; 45
 b90:	91 83       	std	Z+1, r25	; 0x01
 b92:	80 83       	st	Z, r24
			Ret= E_OK;
 b94:	80 e0       	ldi	r24, 0x00	; 0
			break;
 b96:	08 95       	ret
		}
		case TIMER_CH2:
		{
			*Data =TCNT2;
 b98:	84 b5       	in	r24, 0x24	; 36
 b9a:	80 83       	st	Z, r24
 b9c:	11 82       	std	Z+1, r1	; 0x01
			Ret = E_OK;
 b9e:	80 e0       	ldi	r24, 0x00	; 0
			break;
 ba0:	08 95       	ret
		}
		default :
		Ret= E_NOK;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
return Ret;

}
 ba4:	08 95       	ret

00000ba6 <main>:


#include <avr/io.h>

int main(void)
{
 ba6:	ff cf       	rjmp	.-2      	; 0xba6 <main>

00000ba8 <_exit>:
 ba8:	f8 94       	cli

00000baa <__stop_program>:
 baa:	ff cf       	rjmp	.-2      	; 0xbaa <__stop_program>
