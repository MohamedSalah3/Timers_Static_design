
Timers_Static_design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000d96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080006a  0080006a  00000e34  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001033  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e1  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e8  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001556  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_1>
   8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_2>
   c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_3>
  10:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_4>
  14:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_5>
  18:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_6>
  1c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_7>
  20:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_8>
  24:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_9>
  28:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_10>
  2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_11>
  30:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_12>
  34:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_13>
  38:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_14>
  3c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_15>
  40:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_16>
  44:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_17>
  48:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_18>
  4c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_19>
  50:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_20>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 06 	call	0xd64	; 0xd64 <main>
  8a:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	uint8_t RET=0;
  92:	fc 01       	movw	r30, r24
		switch(DIO_info->dir)
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	88 23       	and	r24, r24
  98:	21 f0       	breq	.+8      	; 0xa2 <DIO_init+0x10>
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_init+0xe>
  9e:	4a c0       	rjmp	.+148    	; 0x134 <DIO_init+0xa2>
  a0:	27 c0       	rjmp	.+78     	; 0xf0 <DIO_init+0x5e>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	79 f0       	breq	.+30     	; 0xc6 <DIO_init+0x34>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_init+0x26>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 f0       	breq	.+36     	; 0xd4 <DIO_init+0x42>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_init+0x24>
  b4:	41 c0       	rjmp	.+130    	; 0x138 <DIO_init+0xa6>
  b6:	15 c0       	rjmp	.+42     	; 0xe2 <DIO_init+0x50>
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	80 95       	com	r24
  be:	89 23       	and	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  c2:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
  c4:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
  c6:	97 b3       	in	r25, 0x17	; 23
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	80 95       	com	r24
  cc:	89 23       	and	r24, r25
  ce:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  d0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
						PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
  d2:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
  d4:	94 b3       	in	r25, 0x14	; 20
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
  de:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
  e0:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
  e2:	91 b3       	in	r25, 0x11	; 17
  e4:	81 81       	ldd	r24, Z+1	; 0x01
  e6:	80 95       	com	r24
  e8:	89 23       	and	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
  ee:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
  f0:	80 81       	ld	r24, Z
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	69 f0       	breq	.+26     	; 0x110 <DIO_init+0x7e>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_init+0x72>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	79 f0       	breq	.+30     	; 0x11c <DIO_init+0x8a>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	e9 f4       	brne	.+58     	; 0x13c <DIO_init+0xaa>
 102:	12 c0       	rjmp	.+36     	; 0x128 <DIO_init+0x96>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
 104:	9a b3       	in	r25, 0x1a	; 26
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	89 2b       	or	r24, r25
 10a:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
 10e:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
 110:	97 b3       	in	r25, 0x17	; 23
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	89 2b       	or	r24, r25
 116:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 118:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
 11a:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
 11c:	94 b3       	in	r25, 0x14	; 20
 11e:	81 81       	ldd	r24, Z+1	; 0x01
 120:	89 2b       	or	r24, r25
 122:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 124:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
 126:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
 128:	91 b3       	in	r25, 0x11	; 17
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	89 2b       	or	r24, r25
 12e:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 130:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
 132:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0

			default:
			RET=E_NOK;
	}
return RET;
}
 13e:	08 95       	ret

00000140 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
 140:	44 23       	and	r20, r20
 142:	21 f0       	breq	.+8      	; 0x14c <DIO_Write+0xc>
 144:	4f 3f       	cpi	r20, 0xFF	; 255
 146:	09 f0       	breq	.+2      	; 0x14a <DIO_Write+0xa>
 148:	3f c0       	rjmp	.+126    	; 0x1c8 <DIO_Write+0x88>
 14a:	21 c0       	rjmp	.+66     	; 0x18e <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	69 f0       	breq	.+26     	; 0x16a <DIO_Write+0x2a>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_Write+0x1e>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	79 f0       	breq	.+30     	; 0x176 <DIO_Write+0x36>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	c1 f5       	brne	.+112    	; 0x1cc <DIO_Write+0x8c>
 15c:	12 c0       	rjmp	.+36     	; 0x182 <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
 168:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	60 95       	com	r22
 16e:	68 23       	and	r22, r24
 170:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 172:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
 174:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
 176:	85 b3       	in	r24, 0x15	; 21
 178:	60 95       	com	r22
 17a:	68 23       	and	r22, r24
 17c:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
 180:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
 182:	82 b3       	in	r24, 0x12	; 18
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
 18c:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	61 f0       	breq	.+24     	; 0x1aa <DIO_Write+0x6a>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x60>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	69 f0       	breq	.+26     	; 0x1b4 <DIO_Write+0x74>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	c9 f4       	brne	.+50     	; 0x1d0 <DIO_Write+0x90>
 19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
 1a0:	8b b3       	in	r24, 0x1b	; 27
 1a2:	68 2b       	or	r22, r24
 1a4:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
 1a8:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	68 2b       	or	r22, r24
 1ae:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
 1b2:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	68 2b       	or	r22, r24
 1b8:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
 1bc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	68 2b       	or	r22, r24
 1c2:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
 1c6:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
 1d2:	08 95       	ret

000001d4 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
 1d4:	fa 01       	movw	r30, r20

switch (GPIO)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <DIO_Read+0x1c>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_Read+0x14>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_Read+0x24>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	81 f4       	brne	.+32     	; 0x206 <DIO_Read+0x32>
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
 1e8:	89 b3       	in	r24, 0x19	; 25
 1ea:	68 23       	and	r22, r24
 1ec:	60 83       	st	Z, r22
	break;
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
 1f0:	86 b3       	in	r24, 0x16	; 22
 1f2:	68 23       	and	r22, r24
 1f4:	60 83       	st	Z, r22
	break;
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
 1f8:	83 b3       	in	r24, 0x13	; 19
 1fa:	68 23       	and	r22, r24
 1fc:	60 83       	st	Z, r22
	break;
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
 200:	80 b3       	in	r24, 0x10	; 16
 202:	68 23       	and	r22, r24
 204:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	11 f0       	breq	.+4      	; 0x210 <DIO_Read+0x3c>
{
	*data = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
}


}
 210:	08 95       	ret

00000212 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	61 f0       	breq	.+24     	; 0x22e <DIO_Toggle+0x1c>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Toggle+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	69 f0       	breq	.+26     	; 0x238 <DIO_Toggle+0x26>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	a9 f4       	brne	.+42     	; 0x24c <DIO_Toggle+0x3a>
 222:	0f c0       	rjmp	.+30     	; 0x242 <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	68 27       	eor	r22, r24
 228:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		break;
 22c:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	68 27       	eor	r22, r24
 232:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		break;
 236:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	68 27       	eor	r22, r24
 23c:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 240:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
 242:	82 b3       	in	r24, 0x12	; 18
 244:	68 27       	eor	r22, r24
 246:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
		break;
 24a:	08 95       	ret
		default:
		ret=E_NOK;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
 24e:	08 95       	ret

00000250 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
 250:	8f b7       	in	r24, 0x3f	; 63
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8f bf       	out	0x3f, r24	; 63
}
 256:	08 95       	ret

00000258 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
SET_BIT(GICR,INT2);
 258:	8b b7       	in	r24, 0x3b	; 59
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
 25e:	84 b7       	in	r24, 0x34	; 52
 260:	80 64       	ori	r24, 0x40	; 64
 262:	84 bf       	out	0x34, r24	; 52
}
 264:	08 95       	ret

00000266 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
 266:	8f b7       	in	r24, 0x3f	; 63
 268:	8f 77       	andi	r24, 0x7F	; 127
 26a:	8f bf       	out	0x3f, r24	; 63
}
 26c:	08 95       	ret

0000026e <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
  INT0_external_interrupt();
 290:	e0 91 83 00 	lds	r30, 0x0083
 294:	f0 91 84 00 	lds	r31, 0x0084
 298:	09 95       	icall
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
  INT1_external_interrupt();
 2de:	e0 91 8b 00 	lds	r30, 0x008B
 2e2:	f0 91 8c 00 	lds	r31, 0x008C
 2e6:	09 95       	icall
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
  INT2_external_interrupt();
 32c:	e0 91 79 00 	lds	r30, 0x0079
 330:	f0 91 7a 00 	lds	r31, 0x007A
 334:	09 95       	icall
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
TIMER2COMP();
 37a:	e0 91 91 00 	lds	r30, 0x0091
 37e:	f0 91 92 00 	lds	r31, 0x0092
 382:	09 95       	icall
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	6f 93       	push	r22
 3ba:	7f 93       	push	r23
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
  TIMER2OVF();
 3c8:	e0 91 6f 00 	lds	r30, 0x006F
 3cc:	f0 91 70 00 	lds	r31, 0x0070
 3d0:	09 95       	icall
}
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	2f 93       	push	r18
 400:	3f 93       	push	r19
 402:	4f 93       	push	r20
 404:	5f 93       	push	r21
 406:	6f 93       	push	r22
 408:	7f 93       	push	r23
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
 40e:	af 93       	push	r26
 410:	bf 93       	push	r27
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
  TIMER1CAPT();
 416:	e0 91 8d 00 	lds	r30, 0x008D
 41a:	f0 91 8e 00 	lds	r31, 0x008E
 41e:	09 95       	icall
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
TIMER1COMPA();
 464:	e0 91 75 00 	lds	r30, 0x0075
 468:	f0 91 76 00 	lds	r31, 0x0076
 46c:	09 95       	icall
}
 46e:	ff 91       	pop	r31
 470:	ef 91       	pop	r30
 472:	bf 91       	pop	r27
 474:	af 91       	pop	r26
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	7f 91       	pop	r23
 47c:	6f 91       	pop	r22
 47e:	5f 91       	pop	r21
 480:	4f 91       	pop	r20
 482:	3f 91       	pop	r19
 484:	2f 91       	pop	r18
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
  TIMER1COMPB();
 4b2:	e0 91 73 00 	lds	r30, 0x0073
 4b6:	f0 91 74 00 	lds	r31, 0x0074
 4ba:	09 95       	icall
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	0f 92       	push	r0
 4e6:	11 24       	eor	r1, r1
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
  TIMER1OVF();
 500:	e0 91 8f 00 	lds	r30, 0x008F
 504:	f0 91 90 00 	lds	r31, 0x0090
 508:	09 95       	icall
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 52c:	1f 92       	push	r1
 52e:	0f 92       	push	r0
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	0f 92       	push	r0
 534:	11 24       	eor	r1, r1
 536:	2f 93       	push	r18
 538:	3f 93       	push	r19
 53a:	4f 93       	push	r20
 53c:	5f 93       	push	r21
 53e:	6f 93       	push	r22
 540:	7f 93       	push	r23
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	af 93       	push	r26
 548:	bf 93       	push	r27
 54a:	ef 93       	push	r30
 54c:	ff 93       	push	r31

  TIMER0COMP();
 54e:	e0 91 87 00 	lds	r30, 0x0087
 552:	f0 91 88 00 	lds	r31, 0x0088
 556:	09 95       	icall
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31

  TIMER0OVF_INT();
 59c:	e0 91 7b 00 	lds	r30, 0x007B
 5a0:	f0 91 7c 00 	lds	r31, 0x007C
 5a4:	09 95       	icall
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
  SPI_STC();
 5ea:	e0 91 77 00 	lds	r30, 0x0077
 5ee:	f0 91 78 00 	lds	r31, 0x0078
 5f2:	09 95       	icall
}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
  USART_RXC();
 638:	e0 91 6d 00 	lds	r30, 0x006D
 63c:	f0 91 6e 00 	lds	r31, 0x006E
 640:	09 95       	icall
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
  USART_UDRE();
 686:	e0 91 89 00 	lds	r30, 0x0089
 68a:	f0 91 8a 00 	lds	r31, 0x008A
 68e:	09 95       	icall
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
  USART_TXC();
 6d4:	e0 91 85 00 	lds	r30, 0x0085
 6d8:	f0 91 86 00 	lds	r31, 0x0086
 6dc:	09 95       	icall
}
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	7f 91       	pop	r23
 6ec:	6f 91       	pop	r22
 6ee:	5f 91       	pop	r21
 6f0:	4f 91       	pop	r20
 6f2:	3f 91       	pop	r19
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	ef 93       	push	r30
 720:	ff 93       	push	r31
  ADC_INT();
 722:	e0 91 7f 00 	lds	r30, 0x007F
 726:	f0 91 80 00 	lds	r31, 0x0080
 72a:	09 95       	icall
}
 72c:	ff 91       	pop	r31
 72e:	ef 91       	pop	r30
 730:	bf 91       	pop	r27
 732:	af 91       	pop	r26
 734:	9f 91       	pop	r25
 736:	8f 91       	pop	r24
 738:	7f 91       	pop	r23
 73a:	6f 91       	pop	r22
 73c:	5f 91       	pop	r21
 73e:	4f 91       	pop	r20
 740:	3f 91       	pop	r19
 742:	2f 91       	pop	r18
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	2f 93       	push	r18
 75a:	3f 93       	push	r19
 75c:	4f 93       	push	r20
 75e:	5f 93       	push	r21
 760:	6f 93       	push	r22
 762:	7f 93       	push	r23
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	af 93       	push	r26
 76a:	bf 93       	push	r27
 76c:	ef 93       	push	r30
 76e:	ff 93       	push	r31
  EE_RDY();
 770:	e0 91 81 00 	lds	r30, 0x0081
 774:	f0 91 82 00 	lds	r31, 0x0082
 778:	09 95       	icall
}
 77a:	ff 91       	pop	r31
 77c:	ef 91       	pop	r30
 77e:	bf 91       	pop	r27
 780:	af 91       	pop	r26
 782:	9f 91       	pop	r25
 784:	8f 91       	pop	r24
 786:	7f 91       	pop	r23
 788:	6f 91       	pop	r22
 78a:	5f 91       	pop	r21
 78c:	4f 91       	pop	r20
 78e:	3f 91       	pop	r19
 790:	2f 91       	pop	r18
 792:	0f 90       	pop	r0
 794:	0f be       	out	0x3f, r0	; 63
 796:	0f 90       	pop	r0
 798:	1f 90       	pop	r1
 79a:	18 95       	reti

0000079c <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
  ANA_COMP();
 7be:	e0 91 7d 00 	lds	r30, 0x007D
 7c2:	f0 91 7e 00 	lds	r31, 0x007E
 7c6:	09 95       	icall
}
 7c8:	ff 91       	pop	r31
 7ca:	ef 91       	pop	r30
 7cc:	bf 91       	pop	r27
 7ce:	af 91       	pop	r26
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	7f 91       	pop	r23
 7d6:	6f 91       	pop	r22
 7d8:	5f 91       	pop	r21
 7da:	4f 91       	pop	r20
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	2f 93       	push	r18
 7f6:	3f 93       	push	r19
 7f8:	4f 93       	push	r20
 7fa:	5f 93       	push	r21
 7fc:	6f 93       	push	r22
 7fe:	7f 93       	push	r23
 800:	8f 93       	push	r24
 802:	9f 93       	push	r25
 804:	af 93       	push	r26
 806:	bf 93       	push	r27
 808:	ef 93       	push	r30
 80a:	ff 93       	push	r31
  TWI_I2C();
 80c:	e0 91 6b 00 	lds	r30, 0x006B
 810:	f0 91 6c 00 	lds	r31, 0x006C
 814:	09 95       	icall
}
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
  SPM_RDY();
 85a:	e0 91 71 00 	lds	r30, 0x0071
 85e:	f0 91 72 00 	lds	r31, 0x0072
 862:	09 95       	icall
}
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	bf 91       	pop	r27
 86a:	af 91       	pop	r26
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	7f 91       	pop	r23
 872:	6f 91       	pop	r22
 874:	5f 91       	pop	r21
 876:	4f 91       	pop	r20
 878:	3f 91       	pop	r19
 87a:	2f 91       	pop	r18
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <Timer_Init>:
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ec 01       	movw	r28, r24
prescaler_value=Timer_cfg->Timer_Prescaler;
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	80 93 6a 00 	sts	0x006A, r24
switch (Timer_cfg->Timer_CH_NO) {
 892:	88 81       	ld	r24, Y
 894:	81 30       	cpi	r24, 0x01	; 1
 896:	09 f4       	brne	.+2      	; 0x89a <Timer_Init+0x14>
 898:	48 c0       	rjmp	.+144    	; 0x92a <Timer_Init+0xa4>
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	20 f0       	brcs	.+8      	; 0x8a6 <Timer_Init+0x20>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <Timer_Init+0x1e>
 8a2:	d7 c0       	rjmp	.+430    	; 0xa52 <Timer_Init+0x1cc>
 8a4:	90 c0       	rjmp	.+288    	; 0x9c6 <Timer_Init+0x140>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
    case TIMER_CH0:
        {
  TCCR0 |=T0_NORMAL_MODE;
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	83 bf       	out	0x33, r24	; 51
  
          switch (Timer_cfg->Timer_Mode) {
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	b9 f0       	breq	.+46     	; 0x8de <Timer_Init+0x58>
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <Timer_Init+0x36>
 8b4:	82 30       	cpi	r24, 0x02	; 2
 8b6:	09 f0       	breq	.+2      	; 0x8ba <Timer_Init+0x34>
 8b8:	cd c0       	rjmp	.+410    	; 0xa54 <Timer_Init+0x1ce>
 8ba:	24 c0       	rjmp	.+72     	; 0x904 <Timer_Init+0x7e>
          case TIMER_MODE:
              {
                switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	88 23       	and	r24, r24
 8c0:	21 f0       	breq	.+8      	; 0x8ca <Timer_Init+0x44>
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <Timer_Init+0x42>
 8c6:	c8 c0       	rjmp	.+400    	; 0xa58 <Timer_Init+0x1d2>
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <Timer_Init+0x4c>
				{
                    case TIMER_POLLING_MODE:
                        {/*Disable interrupts for T0 without effecting any other timer*/
                         /*without Disabling Global interrupt*/
                        TIMSK &=T0_INTERRUPT_DISABLE;
 8ca:	89 b7       	in	r24, 0x39	; 57
 8cc:	8c 7f       	andi	r24, 0xFC	; 252
 8ce:	89 bf       	out	0x39, r24	; 57
                            break;
 8d0:	2c c0       	rjmp	.+88     	; 0x92a <Timer_Init+0xa4>
                         }
                                  case TIMER_INTERRUPT_MODE:
                                  { /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
                                    */
                                    G_interrupt_Enable();
 8d2:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                    TIMSK |= T0_INTERRUPT_NORMAL;
 8d6:	89 b7       	in	r24, 0x39	; 57
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	89 bf       	out	0x39, r24	; 57
                                    break;
 8dc:	26 c0       	rjmp	.+76     	; 0x92a <Timer_Init+0xa4>
/*                             TIMER 0 As a COUNTER_RISING_MODE          */
/*************************************************************************/

                          case COUNTER_RISING_MODE:
                            {
                                  TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
 8de:	83 b7       	in	r24, 0x33	; 51
 8e0:	8d 60       	ori	r24, 0x0D	; 13
 8e2:	83 bf       	out	0x33, r24	; 51
                                    switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 8e4:	8a 81       	ldd	r24, Y+2	; 0x02
 8e6:	88 23       	and	r24, r24
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <Timer_Init+0x6c>
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <Timer_Init+0x6a>
 8ee:	b6 c0       	rjmp	.+364    	; 0xa5c <Timer_Init+0x1d6>
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <Timer_Init+0x74>
                                        case TIMER_POLLING_MODE:
                                          {
            /*Disable interrupts for T0 without effecting any other timer*/
              /*without Disabling Global interrupt*/
                                            TIMSK &=T0_INTERRUPT_DISABLE;
 8f2:	89 b7       	in	r24, 0x39	; 57
 8f4:	8c 7f       	andi	r24, 0xFC	; 252
 8f6:	89 bf       	out	0x39, r24	; 57
                                            break;
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <Timer_Init+0x7e>

                                          case TIMER_INTERRUPT_MODE:
                                           /*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
                                              */
                                              G_interrupt_Enable();
 8fa:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                              TIMSK |= T0_INTERRUPT_NORMAL;
 8fe:	89 b7       	in	r24, 0x39	; 57
 900:	81 60       	ori	r24, 0x01	; 1
 902:	89 bf       	out	0x39, r24	; 57
/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
/*************************************************************************/

                                    case COUNTER_FALLING_MODE:
                                    {
                                        TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
 904:	83 b7       	in	r24, 0x33	; 51
 906:	8c 60       	ori	r24, 0x0C	; 12
 908:	83 bf       	out	0x33, r24	; 51
                                          switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	88 23       	and	r24, r24
 90e:	21 f0       	breq	.+8      	; 0x918 <Timer_Init+0x92>
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	09 f0       	breq	.+2      	; 0x916 <Timer_Init+0x90>
 914:	a5 c0       	rjmp	.+330    	; 0xa60 <Timer_Init+0x1da>
 916:	04 c0       	rjmp	.+8      	; 0x920 <Timer_Init+0x9a>
                                              case TIMER_POLLING_MODE:
                                                {

            /*Disable interrupts for T0 without effecting any other timer*/
                /*without Disabling Global interrupt*/
                                                  TIMSK &=T0_INTERRUPT_DISABLE;
 918:	89 b7       	in	r24, 0x39	; 57
 91a:	8c 7f       	andi	r24, 0xFC	; 252
 91c:	89 bf       	out	0x39, r24	; 57

                                                  break;
 91e:	05 c0       	rjmp	.+10     	; 0x92a <Timer_Init+0xa4>
                                                case TIMER_INTERRUPT_MODE:
                                                  {
                                                    /*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
                                                    */
                                                    G_interrupt_Enable();
 920:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;
 924:	89 b7       	in	r24, 0x39	; 57
 926:	81 60       	ori	r24, 0x01	; 1
 928:	89 bf       	out	0x39, r24	; 57
/*************************************************************************/

    case TIMER_CH1:
        {

    switch (Timer_cfg->Timer_Mode)
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	d9 f0       	breq	.+54     	; 0x966 <Timer_Init+0xe0>
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	20 f0       	brcs	.+8      	; 0x93c <Timer_Init+0xb6>
 934:	82 30       	cpi	r24, 0x02	; 2
 936:	09 f0       	breq	.+2      	; 0x93a <Timer_Init+0xb4>
 938:	95 c0       	rjmp	.+298    	; 0xa64 <Timer_Init+0x1de>
 93a:	2d c0       	rjmp	.+90     	; 0x996 <Timer_Init+0x110>
    {
      case TIMER_MODE:
      {
        TCCR1 = T1_NORMAL_MODE_CONFIG;
 93c:	1f bc       	out	0x2f, r1	; 47
 93e:	1e bc       	out	0x2e, r1	; 46
              switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	88 23       	and	r24, r24
 944:	21 f0       	breq	.+8      	; 0x94e <Timer_Init+0xc8>
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	09 f0       	breq	.+2      	; 0x94c <Timer_Init+0xc6>
 94a:	8e c0       	rjmp	.+284    	; 0xa68 <Timer_Init+0x1e2>
 94c:	05 c0       	rjmp	.+10     	; 0x958 <Timer_Init+0xd2>
              case TIMER_POLLING_MODE:
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;
 94e:	89 b7       	in	r24, 0x39	; 57
 950:	83 7c       	andi	r24, 0xC3	; 195
 952:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 954:	80 e0       	ldi	r24, 0x00	; 0
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 956:	95 c0       	rjmp	.+298    	; 0xa82 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 958:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 95c:	89 b7       	in	r24, 0x39	; 57
 95e:	84 60       	ori	r24, 0x04	; 4
 960:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 962:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 964:	8e c0       	rjmp	.+284    	; 0xa82 <Timer_Init+0x1fc>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
            TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
 966:	8e b5       	in	r24, 0x2e	; 46
 968:	9f b5       	in	r25, 0x2f	; 47
 96a:	87 60       	ori	r24, 0x07	; 7
 96c:	9f bd       	out	0x2f, r25	; 47
 96e:	8e bd       	out	0x2e, r24	; 46

            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 970:	8a 81       	ldd	r24, Y+2	; 0x02
 972:	88 23       	and	r24, r24
 974:	21 f0       	breq	.+8      	; 0x97e <Timer_Init+0xf8>
 976:	81 30       	cpi	r24, 0x01	; 1
 978:	09 f0       	breq	.+2      	; 0x97c <Timer_Init+0xf6>
 97a:	78 c0       	rjmp	.+240    	; 0xa6c <Timer_Init+0x1e6>
 97c:	05 c0       	rjmp	.+10     	; 0x988 <Timer_Init+0x102>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 97e:	89 b7       	in	r24, 0x39	; 57
 980:	83 7c       	andi	r24, 0xC3	; 195
 982:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 984:	80 e0       	ldi	r24, 0x00	; 0
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;

                break;
 986:	7d c0       	rjmp	.+250    	; 0xa82 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 988:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 98c:	89 b7       	in	r24, 0x39	; 57
 98e:	84 60       	ori	r24, 0x04	; 4
 990:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 992:	80 e0       	ldi	r24, 0x00	; 0
                G_interrupt_Enable();
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
 994:	76 c0       	rjmp	.+236    	; 0xa82 <Timer_Init+0x1fc>
            }
        break;
      }
      case COUNTER_FALLING_MODE:
      {
            TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
 996:	8e b5       	in	r24, 0x2e	; 46
 998:	9f b5       	in	r25, 0x2f	; 47
 99a:	86 60       	ori	r24, 0x06	; 6
 99c:	9f bd       	out	0x2f, r25	; 47
 99e:	8e bd       	out	0x2e, r24	; 46
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	88 23       	and	r24, r24
 9a4:	21 f0       	breq	.+8      	; 0x9ae <Timer_Init+0x128>
 9a6:	81 30       	cpi	r24, 0x01	; 1
 9a8:	09 f0       	breq	.+2      	; 0x9ac <Timer_Init+0x126>
 9aa:	62 c0       	rjmp	.+196    	; 0xa70 <Timer_Init+0x1ea>
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <Timer_Init+0x132>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
 9ae:	89 b7       	in	r24, 0x39	; 57
 9b0:	83 7c       	andi	r24, 0xC3	; 195
 9b2:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9b4:	80 e0       	ldi	r24, 0x00	; 0
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
                break;
 9b6:	65 c0       	rjmp	.+202    	; 0xa82 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 9b8:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
 9bc:	89 b7       	in	r24, 0x39	; 57
 9be:	84 60       	ori	r24, 0x04	; 4
 9c0:	89 bf       	out	0x39, r24	; 57
      }
      default :
      return E_NOK;
    }

  return E_OK;
 9c2:	80 e0       	ldi	r24, 0x00	; 0
                TIMSK |=T1_INTERRUPT_NORMAL;
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */

                break;
 9c4:	5e c0       	rjmp	.+188    	; 0xa82 <Timer_Init+0x1fc>
  /*                             TIMER 2                                   */
  /*************************************************************************/

  case TIMER_CH2:
  {
TCCR2 |=T2_NORMAL_MODE_CONFIG;
 9c6:	85 b5       	in	r24, 0x25	; 37
 9c8:	85 bd       	out	0x25, r24	; 37
    switch (Timer_cfg->Timer_Mode) {
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	88 23       	and	r24, r24
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <Timer_Init+0x152>
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <Timer_Init+0x150>
 9d4:	4f c0       	rjmp	.+158    	; 0xa74 <Timer_Init+0x1ee>
 9d6:	11 c0       	rjmp	.+34     	; 0x9fa <Timer_Init+0x174>
      case TIMER_MODE:
      {
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
 9d8:	8a 81       	ldd	r24, Y+2	; 0x02
 9da:	88 23       	and	r24, r24
 9dc:	21 f0       	breq	.+8      	; 0x9e6 <Timer_Init+0x160>
 9de:	81 30       	cpi	r24, 0x01	; 1
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <Timer_Init+0x15e>
 9e2:	4a c0       	rjmp	.+148    	; 0xa78 <Timer_Init+0x1f2>
 9e4:	04 c0       	rjmp	.+8      	; 0x9ee <Timer_Init+0x168>
              case TIMER_POLLING_MODE:
              {
                  TIMSK &= T2_INTERRUPT_DISABLE;
 9e6:	89 b7       	in	r24, 0x39	; 57
 9e8:	8f 73       	andi	r24, 0x3F	; 63
 9ea:	89 bf       	out	0x39, r24	; 57
                break;
 9ec:	32 c0       	rjmp	.+100    	; 0xa52 <Timer_Init+0x1cc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 9ee:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 9f2:	89 b7       	in	r24, 0x39	; 57
 9f4:	80 6c       	ori	r24, 0xC0	; 192
 9f6:	89 bf       	out	0x39, r24	; 57

                break;
 9f8:	2c c0       	rjmp	.+88     	; 0xa52 <Timer_Init+0x1cc>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
          ASSR |=0x08;
 9fa:	82 b5       	in	r24, 0x22	; 34
 9fc:	88 60       	ori	r24, 0x08	; 8
 9fe:	82 bd       	out	0x22, r24	; 34
            switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	81 30       	cpi	r24, 0x01	; 1
 a04:	51 f0       	breq	.+20     	; 0xa1a <Timer_Init+0x194>
 a06:	81 30       	cpi	r24, 0x01	; 1
 a08:	18 f0       	brcs	.+6      	; 0xa10 <Timer_Init+0x18a>
 a0a:	82 30       	cpi	r24, 0x02	; 2
 a0c:	b9 f5       	brne	.+110    	; 0xa7c <Timer_Init+0x1f6>
 a0e:	0c c0       	rjmp	.+24     	; 0xa28 <Timer_Init+0x1a2>
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;
 a10:	89 b7       	in	r24, 0x39	; 57
 a12:	8f 73       	andi	r24, 0x3F	; 63
 a14:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a16:	81 e0       	ldi	r24, 0x01	; 1
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;

                break;
 a18:	34 c0       	rjmp	.+104    	; 0xa82 <Timer_Init+0x1fc>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
 a1a:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
 a1e:	89 b7       	in	r24, 0x39	; 57
 a20:	80 6c       	ori	r24, 0xC0	; 192
 a22:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a24:	81 e0       	ldi	r24, 0x01	; 1
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
                  TIMSK|=T2_INTERRUPT_NORMAL;
                break;
 a26:	2d c0       	rjmp	.+90     	; 0xa82 <Timer_Init+0x1fc>
              }
              case COUNTER_FALLING_MODE:
              {
                  ASSR |=0x08;
 a28:	82 b5       	in	r24, 0x22	; 34
 a2a:	88 60       	ori	r24, 0x08	; 8
 a2c:	82 bd       	out	0x22, r24	; 34
                    switch (Timer_cfg->Timer_Polling_Or_Interrupt)
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	88 23       	and	r24, r24
 a32:	19 f0       	breq	.+6      	; 0xa3a <Timer_Init+0x1b4>
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	21 f5       	brne	.+72     	; 0xa80 <Timer_Init+0x1fa>
 a38:	05 c0       	rjmp	.+10     	; 0xa44 <Timer_Init+0x1be>
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;
 a3a:	89 b7       	in	r24, 0x39	; 57
 a3c:	8f 73       	andi	r24, 0x3F	; 63
 a3e:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a40:	81 e0       	ldi	r24, 0x01	; 1
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;

                        break;
 a42:	1f c0       	rjmp	.+62     	; 0xa82 <Timer_Init+0x1fc>
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
 a44:	0e 94 28 01 	call	0x250	; 0x250 <G_interrupt_Enable>
                          TIMSK|=T2_INTERRUPT_NORMAL;
 a48:	89 b7       	in	r24, 0x39	; 57
 a4a:	80 6c       	ori	r24, 0xC0	; 192
 a4c:	89 bf       	out	0x39, r24	; 57
            }
        break;
            }
            }
  default:
  return E_NOK;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
 a50:	18 c0       	rjmp	.+48     	; 0xa82 <Timer_Init+0x1fc>
 a52:	17 c0       	rjmp	.+46     	; 0xa82 <Timer_Init+0x1fc>
                                                  return E_NOK;
                                                }
                                      break;
                                      }
                                      default:
                                      return E_NOK;
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	15 c0       	rjmp	.+42     	; 0xa82 <Timer_Init+0x1fc>
                                    G_interrupt_Enable();
                                    TIMSK |= T0_INTERRUPT_NORMAL;
                                    break;
                                  }
                                  default :
                                  return E_NOK;
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	13 c0       	rjmp	.+38     	; 0xa82 <Timer_Init+0x1fc>
                                              G_interrupt_Enable();
                                              TIMSK |= T0_INTERRUPT_NORMAL;
                                              break;

                                          default :
                                          return E_NOK;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	11 c0       	rjmp	.+34     	; 0xa82 <Timer_Init+0x1fc>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;

                                                    break;
                                                  }
                                                  default:
                                                  return E_NOK;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	0f c0       	rjmp	.+30     	; 0xa82 <Timer_Init+0x1fc>
              return E_NOK;
            }
      break;
      }
      default :
      return E_NOK;
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <Timer_Init+0x1fc>
                Enable Timer0 interrupt
                */
                break;
              }
              default :
              return E_NOK;
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	0b c0       	rjmp	.+22     	; 0xa82 <Timer_Init+0x1fc>
                Enable Timer0 interrupt
                */
                break;
              }
              default:
              return E_NOK;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <Timer_Init+0x1fc>
                */

                break;
              }
              default :
              return E_NOK;
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <Timer_Init+0x1fc>
            }
        break;
            }
            }
  default:
  return E_NOK;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <Timer_Init+0x1fc>
                  TIMSK|=T2_INTERRUPT_NORMAL;

                break;
              }
              default :
              return E_NOK;
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <Timer_Init+0x1fc>
            }
        break;
            }
            }
  default:
  return E_NOK;
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <Timer_Init+0x1fc>
                          TIMSK|=T2_INTERRUPT_NORMAL;
                        break;
                      }

              default :
              return E_NOK;
 a80:	81 e0       	ldi	r24, 0x01	; 1

}
 }

}
}
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	08 95       	ret

00000a88 <Timer_Start>:
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
uint8_t Ret;
switch (Timer_CH_NO) {
 a88:	81 30       	cpi	r24, 0x01	; 1
 a8a:	09 f4       	brne	.+2      	; 0xa8e <Timer_Start+0x6>
 a8c:	4f c0       	rjmp	.+158    	; 0xb2c <Timer_Start+0xa4>
 a8e:	81 30       	cpi	r24, 0x01	; 1
 a90:	20 f0       	brcs	.+8      	; 0xa9a <Timer_Start+0x12>
 a92:	82 30       	cpi	r24, 0x02	; 2
 a94:	09 f0       	breq	.+2      	; 0xa98 <Timer_Start+0x10>
 a96:	f3 c0       	rjmp	.+486    	; 0xc7e <Timer_Start+0x1f6>
 a98:	97 c0       	rjmp	.+302    	; 0xbc8 <Timer_Start+0x140>
case TIMER_CH0:{/***********************************************************************************************************************/
switch(prescaler_value){
 a9a:	80 91 6a 00 	lds	r24, 0x006A
 a9e:	84 30       	cpi	r24, 0x04	; 4
 aa0:	21 f1       	breq	.+72     	; 0xaea <Timer_Start+0x62>
 aa2:	85 30       	cpi	r24, 0x05	; 5
 aa4:	30 f4       	brcc	.+12     	; 0xab2 <Timer_Start+0x2a>
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	51 f0       	breq	.+20     	; 0xabe <Timer_Start+0x36>
 aaa:	82 30       	cpi	r24, 0x02	; 2
 aac:	09 f0       	breq	.+2      	; 0xab0 <Timer_Start+0x28>
 aae:	e9 c0       	rjmp	.+466    	; 0xc82 <Timer_Start+0x1fa>
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <Timer_Start+0x4c>
 ab2:	86 30       	cpi	r24, 0x06	; 6
 ab4:	29 f1       	breq	.+74     	; 0xb00 <Timer_Start+0x78>
 ab6:	87 30       	cpi	r24, 0x07	; 7
 ab8:	09 f0       	breq	.+2      	; 0xabc <Timer_Start+0x34>
 aba:	e3 c0       	rjmp	.+454    	; 0xc82 <Timer_Start+0x1fa>
 abc:	2c c0       	rjmp	.+88     	; 0xb16 <Timer_Start+0x8e>
case TIMER_PRESCALER_NO :{
if(Timer_Count < MAX0){
 abe:	6f 3f       	cpi	r22, 0xFF	; 255
 ac0:	71 05       	cpc	r23, r1
 ac2:	08 f0       	brcs	.+2      	; 0xac6 <Timer_Start+0x3e>
 ac4:	e0 c0       	rjmp	.+448    	; 0xc86 <Timer_Start+0x1fe>
TCCR0 |=TIMER_PRESCALER_NO;
 ac6:	83 b7       	in	r24, 0x33	; 51
 ac8:	81 60       	ori	r24, 0x01	; 1
 aca:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 acc:	60 95       	com	r22
 ace:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_8 :{
if(Timer_Count < MAX0){
 ad4:	6f 3f       	cpi	r22, 0xFF	; 255
 ad6:	71 05       	cpc	r23, r1
 ad8:	08 f0       	brcs	.+2      	; 0xadc <Timer_Start+0x54>
 ada:	d7 c0       	rjmp	.+430    	; 0xc8a <Timer_Start+0x202>
TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
 adc:	83 b7       	in	r24, 0x33	; 51
 ade:	82 60       	ori	r24, 0x02	; 2
 ae0:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 ae2:	60 95       	com	r22
 ae4:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_64 :{
if(Timer_Count < MAX0){
 aea:	6f 3f       	cpi	r22, 0xFF	; 255
 aec:	71 05       	cpc	r23, r1
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <Timer_Start+0x6a>
 af0:	ce c0       	rjmp	.+412    	; 0xc8e <Timer_Start+0x206>
TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
 af2:	83 b7       	in	r24, 0x33	; 51
 af4:	83 60       	ori	r24, 0x03	; 3
 af6:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 af8:	60 95       	com	r22
 afa:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_256 :{
if(Timer_Count < MAX0){
 b00:	6f 3f       	cpi	r22, 0xFF	; 255
 b02:	71 05       	cpc	r23, r1
 b04:	08 f0       	brcs	.+2      	; 0xb08 <Timer_Start+0x80>
 b06:	c5 c0       	rjmp	.+394    	; 0xc92 <Timer_Start+0x20a>
TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
 b08:	83 b7       	in	r24, 0x33	; 51
 b0a:	84 60       	ori	r24, 0x04	; 4
 b0c:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b0e:	60 95       	com	r22
 b10:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_1024 :{
if(Timer_Count < MAX0){
 b16:	6f 3f       	cpi	r22, 0xFF	; 255
 b18:	71 05       	cpc	r23, r1
 b1a:	08 f0       	brcs	.+2      	; 0xb1e <Timer_Start+0x96>
 b1c:	bc c0       	rjmp	.+376    	; 0xc96 <Timer_Start+0x20e>
TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
 b1e:	83 b7       	in	r24, 0x33	; 51
 b20:	85 60       	ori	r24, 0x05	; 5
 b22:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
 b24:	60 95       	com	r22
 b26:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	08 95       	ret
break;
}
case TIMER_CH1:{

  switch(prescaler_value){
 b2c:	80 91 6a 00 	lds	r24, 0x006A
 b30:	84 30       	cpi	r24, 0x04	; 4
 b32:	31 f1       	breq	.+76     	; 0xb80 <Timer_Start+0xf8>
 b34:	85 30       	cpi	r24, 0x05	; 5
 b36:	30 f4       	brcc	.+12     	; 0xb44 <Timer_Start+0xbc>
 b38:	81 30       	cpi	r24, 0x01	; 1
 b3a:	51 f0       	breq	.+20     	; 0xb50 <Timer_Start+0xc8>
 b3c:	82 30       	cpi	r24, 0x02	; 2
 b3e:	09 f0       	breq	.+2      	; 0xb42 <Timer_Start+0xba>
 b40:	ac c0       	rjmp	.+344    	; 0xc9a <Timer_Start+0x212>
 b42:	12 c0       	rjmp	.+36     	; 0xb68 <Timer_Start+0xe0>
 b44:	86 30       	cpi	r24, 0x06	; 6
 b46:	41 f1       	breq	.+80     	; 0xb98 <Timer_Start+0x110>
 b48:	87 30       	cpi	r24, 0x07	; 7
 b4a:	09 f0       	breq	.+2      	; 0xb4e <Timer_Start+0xc6>
 b4c:	a6 c0       	rjmp	.+332    	; 0xc9a <Timer_Start+0x212>
 b4e:	30 c0       	rjmp	.+96     	; 0xbb0 <Timer_Start+0x128>
  case TIMER_PRESCALER_NO :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER_PRESCALER_NO;
 b50:	8e b5       	in	r24, 0x2e	; 46
 b52:	9f b5       	in	r25, 0x2f	; 47
 b54:	81 60       	ori	r24, 0x01	; 1
 b56:	9f bd       	out	0x2f, r25	; 47
 b58:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 b5a:	70 95       	com	r23
 b5c:	61 95       	neg	r22
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	7d bd       	out	0x2d, r23	; 45
 b62:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 b64:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret=E_NOK;
  }
  break;
 b66:	08 95       	ret
  }
  case TIMER_PRESCALER_8 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
 b68:	8e b5       	in	r24, 0x2e	; 46
 b6a:	9f b5       	in	r25, 0x2f	; 47
 b6c:	82 60       	ori	r24, 0x02	; 2
 b6e:	9f bd       	out	0x2f, r25	; 47
 b70:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	7d bd       	out	0x2d, r23	; 45
 b7a:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 b7c:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 b7e:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
 b80:	8e b5       	in	r24, 0x2e	; 46
 b82:	9f b5       	in	r25, 0x2f	; 47
 b84:	83 60       	ori	r24, 0x03	; 3
 b86:	9f bd       	out	0x2f, r25	; 47
 b88:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	7d bd       	out	0x2d, r23	; 45
 b92:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 b94:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
 b96:	08 95       	ret
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
 b98:	8e b5       	in	r24, 0x2e	; 46
 b9a:	9f b5       	in	r25, 0x2f	; 47
 b9c:	84 60       	ori	r24, 0x04	; 4
 b9e:	9f bd       	out	0x2f, r25	; 47
 ba0:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	7d bd       	out	0x2d, r23	; 45
 baa:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bac:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 bae:	08 95       	ret
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
 bb0:	8e b5       	in	r24, 0x2e	; 46
 bb2:	9f b5       	in	r25, 0x2f	; 47
 bb4:	85 60       	ori	r24, 0x05	; 5
 bb6:	9f bd       	out	0x2f, r25	; 47
 bb8:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
 bba:	70 95       	com	r23
 bbc:	61 95       	neg	r22
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	7d bd       	out	0x2d, r23	; 45
 bc2:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 bc4:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
 bc6:	08 95       	ret
	break;
}
case TIMER_CH2:
	{
  
		switch(prescaler_value){
 bc8:	80 91 6a 00 	lds	r24, 0x006A
 bcc:	84 30       	cpi	r24, 0x04	; 4
 bce:	79 f1       	breq	.+94     	; 0xc2e <Timer_Start+0x1a6>
 bd0:	85 30       	cpi	r24, 0x05	; 5
 bd2:	40 f4       	brcc	.+16     	; 0xbe4 <Timer_Start+0x15c>
 bd4:	82 30       	cpi	r24, 0x02	; 2
 bd6:	c9 f0       	breq	.+50     	; 0xc0a <Timer_Start+0x182>
 bd8:	83 30       	cpi	r24, 0x03	; 3
 bda:	10 f5       	brcc	.+68     	; 0xc20 <Timer_Start+0x198>
 bdc:	81 30       	cpi	r24, 0x01	; 1
 bde:	09 f0       	breq	.+2      	; 0xbe2 <Timer_Start+0x15a>
 be0:	5e c0       	rjmp	.+188    	; 0xc9e <Timer_Start+0x216>
 be2:	08 c0       	rjmp	.+16     	; 0xbf4 <Timer_Start+0x16c>
 be4:	86 30       	cpi	r24, 0x06	; 6
 be6:	b9 f1       	breq	.+110    	; 0xc56 <Timer_Start+0x1ce>
 be8:	86 30       	cpi	r24, 0x06	; 6
 bea:	58 f1       	brcs	.+86     	; 0xc42 <Timer_Start+0x1ba>
 bec:	87 30       	cpi	r24, 0x07	; 7
 bee:	09 f0       	breq	.+2      	; 0xbf2 <Timer_Start+0x16a>
 bf0:	56 c0       	rjmp	.+172    	; 0xc9e <Timer_Start+0x216>
 bf2:	3b c0       	rjmp	.+118    	; 0xc6a <Timer_Start+0x1e2>
   
		  case TIMER_PRESCALER_NO :
			{
    
				if(Timer_Count < MAX0){
 bf4:	6f 3f       	cpi	r22, 0xFF	; 255
 bf6:	71 05       	cpc	r23, r1
 bf8:	08 f0       	brcs	.+2      	; 0xbfc <Timer_Start+0x174>
 bfa:	53 c0       	rjmp	.+166    	; 0xca2 <Timer_Start+0x21a>
     
			      TCCR2 |= TIMER_PRESCALER_NO;
 bfc:	85 b5       	in	r24, 0x25	; 37
 bfe:	81 60       	ori	r24, 0x01	; 1
 c00:	85 bd       	out	0x25, r24	; 37
		      
				  TCNT2 = MAX2 - Timer_Count;
 c02:	60 95       	com	r22
 c04:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	08 95       	ret
			break;
			}

case TIMER_PRESCALER_8 :
  {
          if(Timer_Count < MAX0)
 c0a:	6f 3f       	cpi	r22, 0xFF	; 255
 c0c:	71 05       	cpc	r23, r1
 c0e:	08 f0       	brcs	.+2      	; 0xc12 <Timer_Start+0x18a>
 c10:	4a c0       	rjmp	.+148    	; 0xca6 <Timer_Start+0x21e>
            {
           TCCR2 |=TIMER_PRESCALER_8;
 c12:	85 b5       	in	r24, 0x25	; 37
 c14:	82 60       	ori	r24, 0x02	; 2
 c16:	85 bd       	out	0x25, r24	; 37
           TCNT2 =MAX2 - Timer_Count;
 c18:	60 95       	com	r22
 c1a:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	08 95       	ret
  }
  case TIMER_PRESCALER_32:
  {
    if(Timer_Count < MAX1)
         {
         TCCR2 |=TIMER_PRESCALER_32;
 c20:	85 b5       	in	r24, 0x25	; 37
 c22:	83 60       	ori	r24, 0x03	; 3
 c24:	85 bd       	out	0x25, r24	; 37
         TCNT2 =MAX2 - Timer_Count;
 c26:	60 95       	com	r22
 c28:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c2a:	80 e0       	ldi	r24, 0x00	; 0
        else
        {
    Ret=E_NOK;
  }

    break;
 c2c:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :
  {
       if(Timer_Count < MAX2)
 c2e:	6f 3f       	cpi	r22, 0xFF	; 255
 c30:	71 05       	cpc	r23, r1
 c32:	d8 f5       	brcc	.+118    	; 0xcaa <Timer_Start+0x222>
       {
       TCCR2 |=TIMER_PRESCALER_64;
 c34:	85 b5       	in	r24, 0x25	; 37
 c36:	84 60       	ori	r24, 0x04	; 4
 c38:	85 bd       	out	0x25, r24	; 37
       TCNT2 =MAX2 - Timer_Count;
 c3a:	60 95       	com	r22
 c3c:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	08 95       	ret
  Ret=E_NOK;
  }
  break;
  }
  case TIMER_PRESCALER_128 :{
  if(Timer_Count < MAX2){
 c42:	6f 3f       	cpi	r22, 0xFF	; 255
 c44:	71 05       	cpc	r23, r1
 c46:	98 f5       	brcc	.+102    	; 0xcae <Timer_Start+0x226>
  TCCR2 |= TIMER_PRESCALER_128;
 c48:	85 b5       	in	r24, 0x25	; 37
 c4a:	85 60       	ori	r24, 0x05	; 5
 c4c:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 c4e:	60 95       	com	r22
 c50:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	08 95       	ret
  Ret= E_NOK;
    }
  break;
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX2){
 c56:	6f 3f       	cpi	r22, 0xFF	; 255
 c58:	71 05       	cpc	r23, r1
 c5a:	58 f5       	brcc	.+86     	; 0xcb2 <Timer_Start+0x22a>
  TCCR2 |= TIMER_PRESCALER_256;
 c5c:	85 b5       	in	r24, 0x25	; 37
 c5e:	86 60       	ori	r24, 0x06	; 6
 c60:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 c62:	60 95       	com	r22
 c64:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	08 95       	ret

  }
  break;
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX2){
 c6a:	6f 3f       	cpi	r22, 0xFF	; 255
 c6c:	71 05       	cpc	r23, r1
 c6e:	18 f5       	brcc	.+70     	; 0xcb6 <Timer_Start+0x22e>
  TCCR2 |=TIMER_PRESCALER_1024;
 c70:	85 b5       	in	r24, 0x25	; 37
 c72:	87 60       	ori	r24, 0x07	; 7
 c74:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
 c76:	60 95       	com	r22
 c78:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	08 95       	ret
break;
}
default:
Ret= E_NOK;
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	08 95       	ret
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	08 95       	ret
 c86:	80 e0       	ldi	r24, 0x00	; 0
 c88:	08 95       	ret
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	08 95       	ret
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	08 95       	ret
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	08 95       	ret
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	08 95       	ret
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	08 95       	ret
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	08 95       	ret
 ca2:	80 e0       	ldi	r24, 0x00	; 0
 ca4:	08 95       	ret
 ca6:	80 e0       	ldi	r24, 0x00	; 0
 ca8:	08 95       	ret
 caa:	80 e0       	ldi	r24, 0x00	; 0
 cac:	08 95       	ret
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	08 95       	ret
 cb2:	80 e0       	ldi	r24, 0x00	; 0
 cb4:	08 95       	ret
 cb6:	80 e0       	ldi	r24, 0x00	; 0
Ret= E_NOK;
break;
}
return Ret;

}
 cb8:	08 95       	ret

00000cba <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret;
switch (Timer_CH_NO) {
 cba:	81 30       	cpi	r24, 0x01	; 1
 cbc:	51 f0       	breq	.+20     	; 0xcd2 <Timer_Stop+0x18>
 cbe:	81 30       	cpi	r24, 0x01	; 1
 cc0:	18 f0       	brcs	.+6      	; 0xcc8 <Timer_Stop+0xe>
 cc2:	82 30       	cpi	r24, 0x02	; 2
 cc4:	91 f4       	brne	.+36     	; 0xcea <Timer_Stop+0x30>
 cc6:	0c c0       	rjmp	.+24     	; 0xce0 <Timer_Stop+0x26>
  case TIMER_CH0:
  {
		TCCR0 &=0xF8;
 cc8:	83 b7       	in	r24, 0x33	; 51
 cca:	88 7f       	andi	r24, 0xF8	; 248
 ccc:	83 bf       	out	0x33, r24	; 51
		Ret=E_OK;
 cce:	80 e0       	ldi	r24, 0x00	; 0
		break;
 cd0:	08 95       	ret
  }
  case TIMER_CH1:
  {
	     TCCR1 &=0xFFF8;
 cd2:	8e b5       	in	r24, 0x2e	; 46
 cd4:	9f b5       	in	r25, 0x2f	; 47
 cd6:	88 7f       	andi	r24, 0xF8	; 248
 cd8:	9f bd       	out	0x2f, r25	; 47
 cda:	8e bd       	out	0x2e, r24	; 46
		 Ret=E_OK;
 cdc:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 cde:	08 95       	ret
  }
  case TIMER_CH2:
    {
		 TCCR2 &= 0xF8;
 ce0:	85 b5       	in	r24, 0x25	; 37
 ce2:	88 7f       	andi	r24, 0xF8	; 248
 ce4:	85 bd       	out	0x25, r24	; 37
		 Ret=E_OK;
 ce6:	80 e0       	ldi	r24, 0x00	; 0
		 break;
 ce8:	08 95       	ret
    }
  default :
  Ret=E_NOK;
 cea:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;

}
 cec:	08 95       	ret

00000cee <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{
  switch (Timer_CH_NO) {
 cee:	81 30       	cpi	r24, 0x01	; 1
 cf0:	59 f0       	breq	.+22     	; 0xd08 <Timer_GetStatus+0x1a>
 cf2:	81 30       	cpi	r24, 0x01	; 1
 cf4:	18 f0       	brcs	.+6      	; 0xcfc <Timer_GetStatus+0xe>
 cf6:	82 30       	cpi	r24, 0x02	; 2
 cf8:	c9 f4       	brne	.+50     	; 0xd2c <Timer_GetStatus+0x3e>
 cfa:	0e c0       	rjmp	.+28     	; 0xd18 <Timer_GetStatus+0x2a>
    case TIMER_CH0:
    {
  *Data =((TIFR>>TOV0)&1);
 cfc:	88 b7       	in	r24, 0x38	; 56
 cfe:	81 70       	andi	r24, 0x01	; 1
 d00:	fb 01       	movw	r30, r22
 d02:	80 83       	st	Z, r24
    return E_OK;
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	08 95       	ret
    }
    case TIMER_CH1:
    {
    *Data =((TIFR>>TOV1)&1);
 d08:	88 b7       	in	r24, 0x38	; 56
 d0a:	86 95       	lsr	r24
 d0c:	86 95       	lsr	r24
 d0e:	81 70       	andi	r24, 0x01	; 1
 d10:	fb 01       	movw	r30, r22
 d12:	80 83       	st	Z, r24
    return E_OK;
 d14:	80 e0       	ldi	r24, 0x00	; 0
 d16:	08 95       	ret
    }
     case TIMER_CH2:
      {
  *Data =((TIFR>>TOV2)&1);
 d18:	88 b7       	in	r24, 0x38	; 56
 d1a:	82 95       	swap	r24
 d1c:	86 95       	lsr	r24
 d1e:	86 95       	lsr	r24
 d20:	83 70       	andi	r24, 0x03	; 3
 d22:	81 70       	andi	r24, 0x01	; 1
 d24:	fb 01       	movw	r30, r22
 d26:	80 83       	st	Z, r24
    return E_OK;
 d28:	80 e0       	ldi	r24, 0x00	; 0
 d2a:	08 95       	ret
      }
    default :
    return E_NOK;
 d2c:	81 e0       	ldi	r24, 0x01	; 1
  }
}
 d2e:	08 95       	ret

00000d30 <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
 d30:	fb 01       	movw	r30, r22
	uint8_t Ret=0;
	switch (Timer_CH_NO) {
 d32:	81 30       	cpi	r24, 0x01	; 1
 d34:	51 f0       	breq	.+20     	; 0xd4a <Timer_GetValue+0x1a>
 d36:	81 30       	cpi	r24, 0x01	; 1
 d38:	18 f0       	brcs	.+6      	; 0xd40 <Timer_GetValue+0x10>
 d3a:	82 30       	cpi	r24, 0x02	; 2
 d3c:	89 f4       	brne	.+34     	; 0xd60 <Timer_GetValue+0x30>
 d3e:	0b c0       	rjmp	.+22     	; 0xd56 <Timer_GetValue+0x26>
		case TIMER_CH0:
		{
			*Data =TCNT0;
 d40:	82 b7       	in	r24, 0x32	; 50
 d42:	80 83       	st	Z, r24
 d44:	11 82       	std	Z+1, r1	; 0x01
			Ret= E_OK;
 d46:	80 e0       	ldi	r24, 0x00	; 0
			break;
 d48:	08 95       	ret
		}
		case TIMER_CH1:
		{
			*Data =TCNT1;
 d4a:	8c b5       	in	r24, 0x2c	; 44
 d4c:	9d b5       	in	r25, 0x2d	; 45
 d4e:	91 83       	std	Z+1, r25	; 0x01
 d50:	80 83       	st	Z, r24
			Ret= E_OK;
 d52:	80 e0       	ldi	r24, 0x00	; 0
			break;
 d54:	08 95       	ret
		}
		case TIMER_CH2:
		{
			*Data =TCNT2;
 d56:	84 b5       	in	r24, 0x24	; 36
 d58:	80 83       	st	Z, r24
 d5a:	11 82       	std	Z+1, r1	; 0x01
			Ret = E_OK;
 d5c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 d5e:	08 95       	ret
		}
		default :
		Ret= E_NOK;
 d60:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
return Ret;

}
 d62:	08 95       	ret

00000d64 <main>:

#include "DIO.h"
#include "avr/delay.h"
int main(void)
{uint8_t error,err;
	 err=DIO_init (&Dio_configuration);
 d64:	80 e6       	ldi	r24, 0x60	; 96
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
      error=DIO_Write (GPIOB,UPPER_NIBBLE,HIGH);
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	60 ef       	ldi	r22, 0xF0	; 240
 d70:	4f ef       	ldi	r20, 0xFF	; 255
 d72:	0e 94 a0 00 	call	0x140	; 0x140 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	90 e7       	ldi	r25, 0x70	; 112
 d7a:	a2 e0       	ldi	r26, 0x02	; 2
 d7c:	81 50       	subi	r24, 0x01	; 1
 d7e:	90 40       	sbci	r25, 0x00	; 0
 d80:	a0 40       	sbci	r26, 0x00	; 0
 d82:	e1 f7       	brne	.-8      	; 0xd7c <main+0x18>
 d84:	00 c0       	rjmp	.+0      	; 0xd86 <main+0x22>
 d86:	00 00       	nop
	while(1)
    {
    	_delay_ms(1000);
	  error=DIO_Toggle(GPIOB,UPPER_NIBBLE);
 d88:	81 e0       	ldi	r24, 0x01	; 1
 d8a:	60 ef       	ldi	r22, 0xF0	; 240
 d8c:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Toggle>
 d90:	f2 cf       	rjmp	.-28     	; 0xd76 <main+0x12>

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
